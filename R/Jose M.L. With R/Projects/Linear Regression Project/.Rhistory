result <- lapply(v, addrand)
print(result)
result <- sapply(v, addrand)
print(result)
? sapply
#Anonymous Function
v <- 1:5
sapply(v,function(x){x*2})
#Multiple Input
v = 1:5
and <- function(x, ran){
return(x+ran)
}
result <- sapply(v, and)
result <- sapply(v, and, ran = 10)
print(result)
v <- 'Hey its Manthan, The man who do not know introduction'
grep('not', v)
v
grepl('not', v)
v <- 'a', 'b', 'c', 'a'
v <- c('a', 'b', 'c', 'a')
grep('a', v)
grepl('a', v)
grep('a', v)
Sys.Date()
my_date <- as.Date("NOV-03-73", format = %y-%d-%b)
my_date <- as.Date("NOV-03-73", format = "%y-%d-%b")
my_date
my.date <- as.Date("NOV-03-73", format = "%y-%d-%b")
my.date
my.date <- as.Date("Nov-03-73", format = "%y-%d-%b")
my.date
my.date <- as.Date("Nov-03-73", format = "%b-%d-%y")
my.date
as.POSIXct("04:15:20", format = "%H:%M:%S")
? strptime()
install.packages("dplyr")
library(dplyr)
install.packages("nycflights13")
library(dplyr)
library(nycflights13)
flights
a<- flights
View(a)
head(flights)
head(flights)
#Filter
filter(flights, month == 3, day == 11, carrier == 'AA')
#Filter
filter(flights, month == 3, day == 11, carrier == 'AA')
#Slice
slice(flights, 1:10)
head(flights)
#Arrange
arrange(flights, month, year, day, arr_time)
head(arrange(flights, month, year, day, desc(arr_time)))
#Select
head(select(flights, carrier))
#rename
head(rename(flights, mnt=month))
#Distinct
head(distinct(select(flights, arr_time)))
#mutate
head(mutate(flights, new_col = arr_delay - dep_delay))
#transmute
head(transmute(flights, new_col = arr_delay - dep_delay))
#summarise
summarise(flights, avg = mean(air_time, na.rm = T))
summarise(flights, total = sum(air_time, na.rm = T))
#sample_n   it will gives 10 rows randomly
sample_n(flights, 10)
#sample_n   it will gives 10 rows randomly
sample_n(flights, 10)
#sample_n   it will gives 10 rows randomly
sample_n(flights, 10)
#Slice
slice(flights, 1:10)
#Distinct
head(distinct(select(flights, arr_time)))
#mutate
head(mutate(flights, new_col = arr_delay - dep_delay))
#transmute
head(transmute(flights, new_col = arr_delay - dep_delay))
library(dplyr)
#pipe operator
df <- mtcars
arrange(sample_n(filter(df, mpg>20), size = 5), desc(mpg))
df %>% filter(mpg>20) %>% sample_n(size=5) %>% arrange(desc(mpg))
library(dplyr)
dfa <- head(mtcars)
filter(dfa, mpg>20, cylinder == 6)
str(dfa)
filter(dfa, mpg>20, cyl == 6)
dfa %>% arrange(cyl) %>% arrange(desc(wt))
dfa <- mtcars
dfa %>% arrange(cyl) %>% arrange(desc(wt))
dfa %>% arrange(cyl) %>% arrange(desc(wt)) %>% head()
head(arrange(mtcars, cyl, desc(wt)))
select(mtcars, mpg, hp)
head(select(mtcars, mpg, hp))
distinct(mtcars, gear)
mutate(mtcars, Performance = hp/wt)
mutate(head(mtcars), Performance = hp/wt)
transmute(mtcars, avg_mppg = mean(mpg))
summarise(mtcars, avg = mean(mpg))
head(mtcars) %>% select(cyl ==6)
head(mtcars) %>% select(cyl==6)
head(mtcars) %>% filter(cyl==6)
head(mtcars) %>% filter(cyl==6) %>% summarise(avg_hp = mean(hp))
library(tidyr)
library(data.table)
? runif()
?gather()
?rnorm
library(ggplot2)
install.packages("ggplot2movies")
install.packages("ggplot2")
library(ggplot2)
library(ggplot2movies)
df <- ggplot(movies)
str(df)
df
summary(df)
colnames(movies)
head(movies)
print(p1 + geom_histogram())
p1 <- ggplot(movies, aes(x = rating))
print(p1 + geom_histogram())
print(p1 + geom_histogram(binwidth = 0.1))
print(p1 + geom_histogram(binwidth = 100))
print(p1 + geom_histogram(binwidth = 50))
print(p1 + geom_histogram(binwidth = 30))
print(p1 + geom_histogram(binwidth = 0.3))
print(p1 + geom_histogram(binwidth = 0.001))
print(p1 + geom_histogram(binwidth = 0.01))
print(p1 + geom_histogram(binwidth = 0.1))
print(p1 + geom_histogram(binwidth = 0.1, color = 'green'))
print(p1 + geom_histogram(binwidth = 0.1, color = 'yellow'))
print(p1 + geom_histogram(binwidth = 0.1, color = 'yellow', fill = 'yellow'))
print(p1 + geom_histogram(binwidth = 0.1, color = 'yellow', fill = 'red'))
print(p1 + geom_histogram(binwidth = 0.1, color = 'yellow', fill = 'green'))
print(p1 + geom_histogram(binwidth = 0.1, color = 'pink', fill = 'green'))
print(p1 + geom_histogram(binwidth = 0.1, color = 'pink', fill = 'pink'))
print(p1 + geom_histogram(binwidth = 0.1, color = 'pink', fill = 'pink', alpha = 0.4))
p2 <- p1 + geom_histogram(binwidth = 0.1, color = 'pink', fill = 'pink', alpha = 0.4)
p2 <- p1 + geom_histogram(binwidth = 0.1, color = 'pink', fill = 'pink', alpha = 0.4)
p3 <- p2 + xlab('Movies Ratings') + ylab('Count')
print(p3)
p3 <- p2 + xlab('Movies Ratings') + ylab('Count') + ggtitle('Movie Ratings By Manthan')
print(p3)
p2 <- p1 + geom_histogram(binwidth = 0.1, fill = ..count..)
p3 <- p2 + xlab('Movies Ratings') + ylab('Count') + ggtitle('Movie Ratings By Manthan')
print(p3)
p2 <- p1 + geom_histogram(binwidth = 0.1, aes(fill = ..count..))
p3 <- p2 + xlab('Movies Ratings') + ylab('Count') + ggtitle('Movie Ratings By Manthan')
print(p3)
colnames(movies)
movies
pl <- ggplot(movies, aes(x = votes)) %>%
geom_histogram(binwidth = 0.1, aes(fill = ..count..)) %>%
xlab('Votes') + ylab('Count') + ggtitle('Votings')
pl <- ggplot(movies, aes(x = votes)) +
geom_histogram(binwidth = 0.1, aes(fill = ..count..)) +
xlab('Votes') + ylab('Count') + ggtitle('Votings')
p1
pl
pl3
pl <- ggplot(movies, aes(x = votes))
pl2 <- pl + geom_histogram(binwidth = 0.1, aes(fill = ..count..))
pl3 <- pl2 + xlab('Votes') + ylab('Count') + ggtitle('Votings')
pl3
pl <- ggplot(movies, aes(x = votes)) +
geom_histogram(binwidth = 0.1, color = 'pink', fill = 'violet') +
xlab('Votes') + ylab('Count') + ggtitle('Votings')
pl
pl <- ggplot(movies, aes(x = rating)) +
geom_histogram(binwidth = 0.1, color = 'pink', fill = 'violet') +
xlab('Votes') + ylab('Count') + ggtitle('Votings')
pl
pl <- ggplot(movies, aes(x = rating)) +
geom_histogram(binwidth = 0.1, color = 'pink', fill = 'purple') +
xlab('Votes') + ylab('Count') + ggtitle('Votings')
pl
pl <- ggplot(movies, aes(x = rating)) +
geom_histogram(binwidth = 0.1, color = 'pink', aes(fill = ..count..)) +
xlab('Votes') + ylab('Count') + ggtitle('Votings')
pl
pl <- ggplot(movies, aes(x = rating)) +
geom_histogram(binwidth = 0.1, color = 'pink', aes(fill = ..count..)) +
xlab('Votes') + ylab('Count') + ggtitle('Votings')
pl
pl <- ggplot(movies, aes(x = rating)) +
geom_histogram(binwidth = 0.1, color = 'pink', aes(fill = ..count..), fill = 'pink') +
xlab('Votes') + ylab('Count') + ggtitle('Votings')
pl
pl <- ggplot(movies, aes(x = rating)) +
geom_histogram(binwidth = 0.1, color = 'pink', aes(fill = ..count..)) +
xlab('Votes') + ylab('Count') + ggtitle('Votings')
pl
library(ggplot2)
df <- mtcars
pl <- ggplot(df, aes(x = wt, y = mpg))
pl+ geom_point()
pl+ geom_point(aes(size= disp))
pl+ geom_point(aes(size= cyl))
pl+ geom_point(aes(size= wt))
pl+ geom_point(aes(size= gear))
pl+ geom_point(aes(size= qsec))
pl+ geom_point(aes(size= vs))
pl+ geom_point(aes(size= factor(cyl)))
pl+ geom_point(aes(shape = factor(cyl)))
pl+ geom_point(aes(shape = factor(cyl)), size = 5)
pl+ geom_point(aes(shape = factor(cyl)), size = 2)
pl+ geom_point(aes(shape = factor(cyl)), size = 5)
pl+ geom_point(aes(shape = factor(cyl)), size = 5, alpha = 0.4)
pl+ geom_point(aes(shape = factor(cyl), color = factor(cyl)), size = 5, alpha = 0.4)
pl+ geom_point(aes(color = hp), size = 5)
pl+ geom_point(aes(color = hp), size = 5) + scale_color_gradient(low = 'red', high = 'purple')
install.packages("plotly")
library(ggplot2)
library(plotly)
ggplot(mtcars, aes(mpg, wt)) + geom_point() + ggplotly()
ggplot(mtcars, aes(mpg, wt))
ggplot(mtcars, aes(mpg, wt)) + geom_point()
ggplot(mtcars, aes(mpg, wt)) + geom_point() + ggplotly()
ggplotly(ggplot(mtcars, aes(mpg, wt)) + geom_point())
library(ggplot2)
library(ggthemes)
library(dplyr)
library(corrgram)
library(corrplot)
library(ggplot2)
? rnorm
m4 <- matrix(nrow = 2, ncol = 2)
m4
v1<- c(1,2)
v2<- c(3,5)
m4[1,]<-v1
m4[2,]<- v2
m4
rbind(v1,v2)
cbind(v1,v2)
dim(m4)
dim(cbind(v1,v2))
days <- c('Mon', 'Tue', 'Wed', 'Thurs', 'Fri')
temp <- c(21,22,45,29,25)
rain <- c(T,F,T,T,F)
df <- data.frame(days,temp,rain)
df
subset(df, subset = temp>=24)
c1 <- 1:10
c2 <- letters[1:10]
c2
df2 <- data.frame(col.names.1 = c1,col.names.2 = c2 )
df2
nrow(df2)
ncol(df2)
colnames(df2)
rownames(df2)
df2[5,2]
df2[5, 'col.names.2']
df2[2,'col.names.2'] <- 'b'
df2
df2[2, 'col.names.1'] <- 999
df2
df3 <- data.frame(col.names.1 = 11, col.names.2 = 'new')
df3
dfnew <- rbind(df2, df3)
dfnew
df2
df2$col.names.3 <- df2$col.names.1 * 2
df2
rev(1:10)
?rnorm
?lapply(list, function)
?lapply
sample(x=1:10, 3)
sample(x=1:10, 3)
sample(x=1:10, 3)
str(1:10)
a <- append(v, 1:10)
a
is.vector(a)
as.list(a)
#Sample
sample(1:100,5)
#Lapply-Sapply
v = 1:5
addrand <- function(x){
ran <- sample(1:100, 1)
return(x+ran)
}
result <- lapply(v, addrand)
print(result)
result <- sapply(v, addrand)
print(result)
#Anonymous Function
v <- 1:5
sapply(v,function(x){x*2})
#Multiple Input
v = 1:5
and <- function(x, ran){
return(x+ran)
}
result <- sapply(v, and, ran = 10)
print(result)
v <- 'Hey its Manthan, The man who do not know introduction'
grepl('not', v)
v <- c('a', 'b', 'c', 'a')
grep('a', v)
my.date <- as.Date("Nov-03-73", format = "%b-%d-%y")
my.date
as.POSIXct("04:15:20", format = "%H:%M:%S")
Sys.Date()
v
library(ggplot2)
library(ggplot2movies)
pl <- ggplot(movies, aes(x = rating)) +
geom_histogram(binwidth = 0.1, color = 'pink', aes(fill = ..count..)) +
xlab('Votes') + ylab('Count') + ggtitle('Votings')
pl
setwd("F:/Programs/R/Jose M.L. With R/Machine Learning with R/Linear Regression/Project")
df <- read.csv('bikeshare.csv')
df <- read.csv('bikeshare.csv')
head(df)
plot(df)
library(ggplot2)
library(ggthemes)
ggplot(df, aes(x='temp', y='count')) +
geom_dotplot()
ggplot(df, aes(x=temp, y=count)) +
geom_point()
ggplot(df, aes(x=temp, y=count)) +
geom_point(alpha=0.3)
df <- mpg
pl <- ggplot(df, aes(x = class))
pl2 <- pl + geom_bar(aes(fill = drv), position = 'dodge')
pl2
df <- mtcars
pl <- ggplot(df, aes(x = wt, y = mpg))
pl+ geom_point(aes(shape = factor(cyl), color = factor(cyl)), size = 5, alpha = 0.4)
pl+ geom_point(aes(color = hp), size = 5) + scale_color_gradient(low = 'red', high = 'yellow')
pl+ geom_point(aes(color = hp), size = 5) + scale_color_gradient(low = 'red', high = 'yellow')
pl+ geom_point(aes(shape = factor(cyl), color = factor(cyl)), size = 5, alpha = 0.4)
ggplot(df, aes(x=temp, y=count)) +
geom_point(alpha=0.3) + scale_color_gradient(low='white', high='blue')
df <- read.csv('bikeshare.csv')
head(df)
ggplot(df, aes(x=temp, y=count)) +
geom_point(alpha=0.3) + scale_color_gradient(low='white', high='blue')
pl <- ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() + coord_cartesian(xlim= c(1,4), ylim = c(15,30))
pl
pl <- ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() + coord_fixed(ratio = 10/10)
pl
pl <- ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() + facet_grid(.~drv)
pl
ggplot(df, aes(x=temp, y=count)) +
geom_point(alpha=0.3, aes(color=temp)) + scale_color_gradient(low='white', high='blue')
library(ggplot2)
library(ggthemes)
df <- read.csv('bikeshare.csv')
ggplot(df, aes(x=temp, y=count)) +
geom_point(alpha=0.3, aes(color=temp)) + scale_color_gradient(low='white', high='blue')
geom_point(alpha=0.3, aes(color=temp)) +  + scale_color_gradient(low='white', high='blue'
geom_point(alpha=0.3, aes(color=temp)) + scale_color_gradient(low='white', high='blue'
geom_point(alpha=0.3, aes(color=temp) + scale_color_gradient(low='white', high='blue'
geom_point(alpha=0.3, aes(color=temp) + scale_color_gradient(low='white', high='blue')
geom_point(alpha=0.3, aes(color=temp) + scale_color_gradient(low='white', high='blue')
ggplot(df, aes(x=temp, y=count)) +
ggplot(df, aes(x=temp, y=count)) +
geom_point(alpha=0.3, aes(color=temp)) + scale_color_gradient(low='white', high='blue')
ggplot(df, aes(x=temp, y=count)) +
geom_point(alpha=0.3, aes(color=temp))# + scale_color_gradient(low='white', high='blue')
ggplot(df, aes(x=temp, y=count)) +
geom_point(alpha=0.3, aes(color=temp)) +
theme_bw()
ggplot(df, aes(datetime, count)) +
geom_point(alpha=0.3, aes(color=temp))
#Datetime vs Count Graph
df$datetime <- as.POSIXct(df$datetime)
ggplot(df, aes(datetime, count)) +
geom_point(alpha=0.3, aes(color=temp))
cor(x= df$temp, y= df$count)
#Correlation between Temperature and Count
corr(df[,c('temp', 'count')])
#Correlation between Temperature and Count
cor(df[,c('temp', 'count')])
#BoxGraph of Season vs Count
ggplot(df, aes(season, count))+
geom_boxplot(aes(color=season))
#BoxGraph of Season vs Count
ggplot(df, aes(season, count))+
geom_boxplot()
#BoxGraph of Season vs Count
ggplot(df, aes(factor(season), count))+
geom_boxplot()
#BoxGraph of Season vs Count
ggplot(df, aes(factor(season), count))+
geom_boxplot(aes(color=factor(season)))
str(df)
sd <- df$datetime[4]
format(sd, "%H")
df$datetime[4]
df$hour <- sapply(df$datetime, function(x){format(x, "%H")})
#Graph of Count vs Hour && Color == Temp
wd <- any(df$workingday == 1)
wd
#Graph of Count vs Hour && Color == Temp
wd <- subtitle(df, df$workingday==1)
#Graph of Count vs Hour && Color == Temp
wd <- subset(df, df$workingday==1)
wd
ggplot(wd, aes(count, hour)) +
geom_point(aes(color = temp), alpha=0.4) +
theme_bw() +
scale_color_gradient(colors=c('pink', 'red', 'yellow'))
ggplot(wd, aes(count, hour)) +
geom_point(aes(color = temp), alpha=0.4) +
theme_bw() +
scale_color_gradientn(colors=c('pink', 'red', 'yellow'))
ggplot(wd, aes(hour, count)) +
geom_point(aes(color = temp), alpha=0.4) +
theme_bw() +
scale_color_gradientn(colors=c('pink', 'red', 'yellow'))
ggplot(wd, aes(hour, count)) +
geom_point(aes(color = temp), alpha=0.4, position = position_jitter(w=1, h=0)) +
theme_bw() +
scale_color_gradientn(colors=c('pink', 'red', 'yellow'))
wd <- subset(wd, wd==FALSE)
wd
wd <- subset(df, df$workingday==0)              #---------- For non-working days
ggplot(wd, aes(hour, count)) +
geom_point(aes(color = temp), alpha=0.4, position = position_jitter(w=1, h=0)) +
theme_bw() +
scale_color_gradientn(colors=c('pink', 'red', 'yellow'))
library(dplyr)
#Graph of Count vs Hour && Color == Temp    ####------------2nd Way
ggplot(filter(df, workingday==1), aes(hour, count)) +
geom_point(aes(color = temp), alpha=0.4, position = position_jitter(w=1, h=0)) +
theme_bw() +
scale_color_gradientn(colors=c('pink', 'red', 'yellow'))
ggplot(filter(df, workingday==0), aes(hour, count)) +
geom_point(aes(color = temp), alpha=0.4, position = position_jitter(w=1, h=0)) +
theme_bw() +
scale_color_gradientn(colors=c('pink', 'red', 'yellow'))
#---------- For non-working days
ggplot(filter(df, workingday==0), aes(hour, count)) +
geom_point(aes(color = temp), alpha=0.4, position = position_jitter(w=5, h=0)) +
theme_bw() +
scale_color_gradientn(colors=c('pink', 'red', 'yellow'))
#---------- For non-working days
ggplot(filter(df, workingday==0), aes(hour, count)) +
geom_point(aes(color = temp), alpha=0.4, position = position_jitter(w=20, h=0)) +
theme_bw() +
scale_color_gradientn(colors=c('pink', 'red', 'yellow'))
#---------- For non-working days
ggplot(filter(df, workingday==0), aes(hour, count)) +
geom_point(aes(color = temp), alpha=0.4, position = position_jitter(w=1, h=5)) +
theme_bw() +
scale_color_gradientn(colors=c('pink', 'red', 'yellow'))
#---------- For non-working days
ggplot(filter(df, workingday==0), aes(hour, count)) +
geom_point(aes(color = temp), alpha=0.4, position = position_jitter(w=0, h=5)) +
theme_bw() +
scale_color_gradientn(colors=c('pink', 'red', 'yellow'))
#---------- For non-working days
ggplot(filter(df, workingday==0), aes(hour, count)) +
geom_point(aes(color = temp), alpha=0.4, position = position_jitter(w=1, h=0)) +
theme_bw() +
scale_color_gradientn(colors=c('pink', 'red', 'yellow'))
#---------- For working days
ggplot(filter(df, workingday==1), aes(hour, count)) +
geom_point(aes(color = temp), alpha=0.4, position = position_jitter(w=1, h=1)) +
theme_bw() +
scale_color_gradientn(colors=c('pink', 'red', 'yellow'))
#---------- For working days
ggplot(filter(df, workingday==1), aes(hour, count)) +
geom_point(aes(color = temp), alpha=0.4, position = position_jitter(w=1, h=0)) +
theme_bw() +
scale_color_gradientn(colors=c('pink', 'red', 'yellow'))
#---------- For working days
ggplot(filter(df, workingday==1), aes(hour, count)) +
geom_point(aes(color = temp), alpha=0.4, position = position_jitter(w=20, h=0)) +
theme_bw() +
scale_color_gradientn(colors=c('pink', 'red', 'yellow'))
#---------- For working days
ggplot(filter(df, workingday==1), aes(hour, count)) +
geom_point(aes(color = temp), alpha=0.4, position = position_jitter(w=20, h=10)) +
theme_bw() +
scale_color_gradientn(colors=c('pink', 'red', 'yellow'))
#---------- For working days
ggplot(filter(df, workingday==1), aes(hour, count)) +
geom_point(aes(color = temp), alpha=0.4, position = position_jitter(w=1, h=0)) +
theme_bw() +
scale_color_gradientn(colors=c('pink', 'red', 'yellow'))
model <- lm(count ~ temp, df)
summary(model)
predict(model, 25)
predict(model, as.data.frame(25))
predict(model, as.data.frame(temp = c(25)))
test <- data.frame(temp=c(25))
predict(model, test)#as.data.frame(temp = c(25)))
predict(model, as.data.frame(temp=c(25)))
predict(model, data.frame(temp=c(25)) )
predict(model, data.frame(temp=c(25)) )
df$hour <- sapply(df$hour, as.numeric)
model2 <- lm(count ~ . -casual -registered -datetime -atemp, df)
summary(model2)
